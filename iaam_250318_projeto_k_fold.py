# -*- coding: utf-8 -*-
"""IAAM_250318_Projeto_K_Fold.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YWoABo-uD6kh0Ic9AFAEDeHYTf0qol_h
"""

CV = 100
TREE = 100

"""# BASE DE DADOS:

Etapa de base de dados (tratando e montando as bases de treino / teste).

- Importar a base de dados do Projeto05.csv
- Eliminação das colunas e informações indesejadas.
- Apresentação do Head da base (confirmando o resultado).
"""

# Importar a lib do Pandas Pd
import pandas as pd

# Determinar qual é a URL da minha base:
URL = "https://raw.githubusercontent.com/profviniciusheltai/AulaIA/refs/heads/main/Projeto05.csv"

# Define ma variavel dados todos os valores extraidos:
dados = pd.read_csv(URL)

# Imprime a base a fim de confirmar o resultado:
dados.head()

# Define ma variavel dados todos os valores extraidos:
dados = pd.read_csv(URL).drop(columns=["Unnamed: 0"], axis=1)

# Imprime a base a fim de confirmar o resultado:
dados.head()

"""Criação das Bases:

- Importando as libs e modelos
- Definindo o que é X e Y
- Criação das bases
- Imprimindo a quantidade das bases
"""

# Importando as libs e modelos:
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

# Definindo o que é feature e resposta (X e Y):
x = dados[["preco", "idade_do_modelo", "km_por_ano"]]
y = dados["vendido"]

# Montando a base atraves do metodo train_test_split:
SEED = 15
np.random.seed(SEED)
treino_x, teste_x, treino_y, teste_y = train_test_split(x,
                                                        y,
                                                        test_size=0.3,
                                                        stratify = y)

# Apresentação do resultado (quantidade):
print(f"Treino: {len(treino_x)} / Teste: {len(teste_x)}")

"""# BASE LINE - DUMMY CLASSIFIER:

Definição de uma Base Line (uma estimativa - taxa minima aceitavel de acertos)
"""

# Importação da Lib:
from sklearn.dummy import DummyClassifier

# Determinação do Modelo DummyClassifier():
dummy_stratified = DummyClassifier()

# Treinamento com o modelo:
dummy_stratified.fit(treino_x, treino_y)

# Acuracia do Modelo DummyClassifier:
acuracia_dummy = dummy_stratified.score(teste_x, teste_y)*100

# Apresentação do Resultado (acuracia do modelo):
print(f"Acuracia Dummy Stratified: {acuracia_dummy:.2f}%")

"""# ARVORE DE DECISÃO:"""

# Importação lib:
from sklearn.tree import DecisionTreeClassifier

# Definição e Aplicação do Modelo:
np.random.seed(SEED)

# Determinação do Modelo DecisionTreeClassifier():
decisionTree = DecisionTreeClassifier(max_depth=TREE)

# Treinamento com o Modelo:
decisionTree.fit(treino_x, treino_y)

# Previsao com DecisionTreeClassifier:
previsao_tree = decisionTree.predict(teste_x)

# Acuracia do Modelo DecisionTreeClassifier:
acuracia_tree = accuracy_score(teste_y, previsao_tree) * 100

# Apresentação do Resultado (acuracia do modelo):
print(f"Acuracia Devision Tree   : {acuracia_tree:.2f}%")
print(f"Acuracia Dummy Stratified: {acuracia_dummy:.2f}%")

"""# CROSS VALIDATE:

Para execução:

- Importar a Lib Cross Validate
- Criar o modelo (vamos usar a mesma base do DecisionTreeClassifier)
- Executar o CrossValidate (passando todo o X e Y no qual ira quebrar em k partes sera o proprio modelo). Ex: quebrando em 3 partes (CV), atribuindo em uma variavel chamado resultado.
- Imprimir os resultados obtidos.
"""

# Importando as libs:
from sklearn.model_selection import cross_validate

# Determinação do Modelo DecisionTreeClassifier():
# decisionTree = DecisionTreeClassifier(max_depth=2)
# OBS: Como estamos usando no modelo acima, ignorado aqui (duplicado)

# Aplicando o Cross_Validate com decisionTree com k=3
resultadoCrossValidate = cross_validate(decisionTree, x, y, cv=CV)

# Apresentação do resultado completo do CrossValidate:
print("Resultado do CrossValidate: ")
resultadoCrossValidate

# Apresentação do Resultado do test_score:
resultadoCrossValidate["test_score"]

# Apresentação da Media:
mediaCrossValidate = resultadoCrossValidate["test_score"].mean()
print(f"Media do CrossValidate   : {mediaCrossValidate*100:.2f}%\n")

# Resultados Anteriores como referencia:
print(f"Acuracia Devision Tree   : {acuracia_tree:.2f}%")
print(f"Acuracia Dummy Stratified: {acuracia_dummy:.2f}%")