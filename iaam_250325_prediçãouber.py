# -*- coding: utf-8 -*-
"""IAAM_250325_PrediçãoUBER.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WoFp9WHx72QL77cZgn6xbdy2Wd_VimXc
"""

# Importação do Modelo:
import pandas as pd

# Carregamento das informações:
URL = "https://raw.githubusercontent.com/profviniciusheltai/FECAP_IAAM/refs/heads/main/baseUber.csv"
dados = pd.read_csv(URL)

# Exibindo os resultados:
dados.head()

# Importando as Libs:
import datetime
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.impute import SimpleImputer

# Pre-Processamento dos dados:
df = dados.copy()

# Converter as informações de horario para numerico:
df['hora'] = pd.to_datetime(df['horario']).dt.hour
df['dia_semana'] = pd.to_datetime(df['horario']).dt.weekday
df.drop('horario', axis=1, inplace=True)

# LabelEncode para "tipo_pedido":
le_tipo_pedido = LabelEncoder()
df['tipo_pedido_encoded'] = le_tipo_pedido.fit_transform(df['tipo_pedido'])
df.drop('tipo_pedido', axis=1, inplace=True)

# One-hot Encoding para Metodo de Pagamento:
onehot_encoder = OneHotEncoder(sparse_output=False)
onehot_encoded = onehot_encoder.fit_transform(df[['metodo_pagamento']])
onehot_df = pd.DataFrame(onehot_encoded, columns=onehot_encoder.get_feature_names_out(['metodo_pagamento']))
df = pd.concat([df.reset_index(drop=True), onehot_df], axis=1)
df.drop('metodo_pagamento', axis=1, inplace=True)

# Imputação de Valores Ausentes:
imputer = SimpleImputer(strategy='mean')
df = pd.DataFrame(imputer.fit_transform(df), columns=df.columns)

df

# Importando lib:
import numpy as np
from sklearn.model_selection import train_test_split

# Montar as bases X e Y:
x = df.drop('preco', axis=1)
y = df['preco']

# Antes - Montar as bases X e Y - Mesmo resultado:
# x = dados[['xxxx', 'xxxxx', 'xxxxx']]
# y = dados['xxxxx']

# Montando a base atraves do metodo trai_test_split
SEED = 15
np.random.seed(SEED)
treino_x, teste_x, treino_y, teste_y = train_test_split(x,
                                                        y,
                                                        test_size = 0.3)
# Não utilizamos Stratify, pois o y não é classificatorio (1 ou 0) e sim
# valores da corrida (multiplos resultados).

# Apresentação dos resultados:
print(f"Treino: {len(treino_x)} e Teste:{len(teste_x)}")

# Importando lib do modelo:
from sklearn.ensemble import GradientBoostingRegressor

# REFERENCIA:
# https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingRegressor.html

modelo = GradientBoostingRegressor()
modelo.fit(treino_x, treino_y)

# Importação das Libs Metricas
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import accuracy_score

# Acuracia do Modelo GradientBoostingRegressor
acuracia = modelo.score(teste_x, teste_y)*100
print(f"Acuracia: {acuracia:.2f}%")

# Avaliação do Modelo:
predicao_y = modelo.predict(teste_x)
mse = mean_squared_error(teste_y, predicao_y)
mae = mean_absolute_error(teste_y, predicao_y)
r2 = r2_score(teste_y, predicao_y)

print(f"MSE: {mse:2f}")
print(f"MAE: {mae:2f}")
print(f"R2 : {r2*100:2f} %")

# ANALISE GRAFICA DOS RESULTADOS:

# Importando as libs graficas:
import matplotlib.pyplot as plt
import seaborn as sns

# Grafico 1 - ScatterPlot - Preço Real VS Preço Previsto:
plt.figure(figsize=(10,6))
sns.scatterplot(x=teste_y, y=predicao_y)
plt.plot([min(teste_y), max(teste_y)], [min(teste_y), max(teste_y)],
         color='red')
plt.xlabel("Preço Real")
plt.ylabel("Preço Previsto")
plt.title("Preço Real VS Preço Previsto")
plt.show()

# Grafico 2 - Histograma - Distribuição:
plt.figure(figsize=(10,6))
sns.histplot(teste_y - predicao_y, kde=True)
plt.xlabel("Residuos (Preço Real - Preço Previsto)")
plt.title("Distribuição dos Residuos")
plt.show()

# Grafico 3 - BoxPlot - Preço Por Pedido (tipo do UBER):
plt.figure(figsize=(10,6))
sns.boxplot(x='tipo_pedido_encoded', y='preco', data=df)
plt.title("Preço por Tipo de Pedido")
plt.show()

# Grafico 4 - ScatterPlot - Preço pela Distancia):
plt.figure(figsize=(10,6))
sns.scatterplot(x='distancia', y='preco', data=df)
plt.title("Preço VS Distancia")
plt.show()

# Grafico 5 - BoxPlot - Preço por Dia de Semana:
plt.figure(figsize=(10,6))
sns.boxplot(x='dia_semana', y='preco', data=df)
plt.title("Preço por Dia da Semana")
plt.show()

# PREDIÇÃO PARA SABER O CUSTO:

def preverPreco(tipo_uber, distancia, horario, metodo_pagamento):
  hora = pd.to_datetime(horario).hour
  dia_semana = pd.to_datetime(horario).weekday()
  tipo_uber_encoded = le_tipo_pedido.transform([tipo_uber])[0]

  novo_dado = pd.DataFrame(columns=treino_x.columns)

  novo_dado.loc[0, 'distancia'] = distancia
  novo_dado.loc[0, 'hora'] = hora
  novo_dado.loc[0, 'dia_semana'] = dia_semana
  novo_dado.loc[0, 'tipo_pedido_encoded'] = tipo_uber_encoded

  if metodo_pagamento == "Cartão":
    novo_dado.loc[0, 'metodo_pagamento_Cartão'] = 1
    novo_dado.loc[0, 'metodo_pagamento_Dinheiro'] = 0
    novo_dado.loc[0, 'metodo_pagamento_Pix'] = 0

  elif metodo_pagamento == "Dinheiro":
    novo_dado.loc[0, 'metodo_pagamento_Cartão'] = 0
    novo_dado.loc[0, 'metodo_pagamento_Dinheiro'] = 1
    novo_dado.loc[0, 'metodo_pagamento_Pix'] = 0

  else:
    novo_dado.loc[0, 'metodo_pagamento_Cartão'] = 0
    novo_dado.loc[0, 'metodo_pagamento_Dinheiro'] = 0
    novo_dado.loc[0, 'metodo_pagamento_Pix'] = 1

  for col in novo_dado.columns:
    if pd.isna(novo_dado.loc[0, col]):
      novo_dado.loc[0, col] = treino_x[col].mean()

  preco_previsto = modelo.predict(novo_dado)[0]
  return preco_previsto

# Exemplo de Uso da Predição:
horario = datetime.datetime(2023, 11, 8, 19, 0, 0)
tipoUber = "Uber Select"
distancia = 25
tipoPagamento = "Dinheiro"

# preverPreco(tipo_uber, distancia, horario, metodo_pagamento)
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
print("\nEXEMPLO DE PREDIÇÃO: \n")
print(f"Tipo Pedido      : {tipoUber}")
print(f"Distancia [km]   : {distancia}")
print(f"Horario          : {horario}")
print(f"Pagamento        : {tipoPagamento}\n")
print(f"VALOR PREVISTO R$: {preco_previsto:3.2f}")

distancia = 1
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
valorKm = preco_previsto/distancia
print(f"R$ {preco_previsto:3.2f} - {distancia} - {valorKm:3.2f}/km")

distancia = 2
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
valorKm = preco_previsto/distancia
print(f"R$ {preco_previsto:3.2f} - {distancia} - {valorKm:3.2f}/km")

distancia = 3
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
valorKm = preco_previsto/distancia
print(f"R$ {preco_previsto:3.2f} - {distancia} - {valorKm:3.2f}/km")

distancia = 4
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
valorKm = preco_previsto/distancia
print(f"R$ {preco_previsto:3.2f} - {distancia} - {valorKm:3.2f}/km")

distancia = 5
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
valorKm = preco_previsto/distancia
print(f"R$ {preco_previsto:3.2f} - {distancia} - {valorKm:3.2f}/km")

distancia = 10
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
valorKm = preco_previsto/distancia
print(f"R$ {preco_previsto:3.2f} - {distancia} - {valorKm:3.2f}/km")

horario = datetime.datetime(2023, 11, 8, 12, 0, 0)
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
print(f"R$ {preco_previsto:3.2f} - {horario}")

horario = datetime.datetime(2023, 11, 8, 13, 0, 0)
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
print(f"R$ {preco_previsto:3.2f} - {horario}")

horario = datetime.datetime(2023, 11, 8, 14, 0, 0)
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
print(f"R$ {preco_previsto:3.2f} - {horario}")

horario = datetime.datetime(2023, 11, 8, 15, 0, 0)
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
print(f"R$ {preco_previsto:3.2f} - {horario}")

horario = datetime.datetime(2023, 11, 8, 16, 0, 0)
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
print(f"R$ {preco_previsto:3.2f} - {horario}")

horario = datetime.datetime(2023, 11, 8, 17, 0, 0)
preco_previsto = preverPreco(tipoUber, distancia, horario, tipoPagamento)
print(f"R$ {preco_previsto:3.2f} - {distancia}")